#!usr/bin/env node
const fs = require("fs");
const yaml = require("js-yaml");
const path = require("path");
const { parse } = require("jsona-openapi-js");
const { generate } = require("typegen-openapi");

const argv = require("yargs/yargs")(process.argv.slice(2))
  .help()
  .usage("$0 <input> <output>", "Generate type file for kisa")
  .positional("input", {
    type: "string",
    describe: "openapi json/yaml/jsona file",
  })
  .positional("output", {
    type: "string",
    description: "output d.ts file",
  }).argv;

function load(file) {
  const ext = path.extname(argv.input);
  const content = fs.readFileSync(file, "utf8");
  if (ext === ".json") {
    return JSON.parse(ext);
  } else if (ext === ".yaml" || ext === ".yml") {
    return yaml.load(content);
  } else if (ext === ".jsona") {
    return parse(content);
  }
}

function render(spec) {
  let content = `/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  KisaHandler,
  KisaHandlers,
  KisaMiddlewares,
  KisaMiddleware,
  KisaSecurityHandlers,
  OpenApiSpec,
} from "kisa";

`;

  content += generate(spec, {
    handlers: `export interface Handlers<S> extends KisaHandlers<S> {<% list.forEach(function(name) { %>
  <%= name %>: KisaHandler<S, <%= cases.pascalCase(name) %>Req>; <% });%>}`,
    middlewares: `export interface Middlewares<S> extends KisaMiddlewares<S> {<% list.forEach(function(name) { %>
  <%= name %>: KisaMiddleware<S>; <% });%>}`,
    securityHandlers: `export interface SecurityHandlers<S> extends KisaSecurityHandlers<S> {<% list.forEach(function(name) { %>
  <%= name %>: (config: string[]) => KisaMiddleware<S>; <% });%>}`,
  });

  return content;
}

function main() {
  const spec = load(argv.input);
  const content = render(spec);
  fs.writeFileSync(argv.output, content);
}

main();
